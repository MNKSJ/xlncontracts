/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface SecretRegistryContract
  extends Truffle.Contract<SecretRegistryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<SecretRegistryInstance>;
}

export interface SecretRevealed {
  name: "SecretRevealed";
  args: {
    secrethash: string;
    secret: string;
    0: string;
    1: string;
  };
}

type AllEvents = SecretRevealed;

export interface SecretRegistryInstance extends Truffle.ContractInstance {
  /**
   * Registers a hash time lock secret and saves the block number. This allows the lock to be unlocked after the expiration block
   * @param secret The secret used to lock the hash time lock
   */
  registerSecret: {
    (secret: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      secret: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      secret: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      secret: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Registers multiple hash time lock secrets and saves the block number
   * @param secrets The array of secrets to be registered
   */
  registerSecretBatch: {
    (secrets: string[], txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      secrets: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      secrets: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      secrets: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Get the stored block number at which the secret was revealed
   * @param secrethash The hash of the registered secret `keccak256(secret)`
   */
  getSecretRevealBlockHeight(
    secrethash: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    /**
     * Registers a hash time lock secret and saves the block number. This allows the lock to be unlocked after the expiration block
     * @param secret The secret used to lock the hash time lock
     */
    registerSecret: {
      (secret: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        secret: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        secret: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        secret: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Registers multiple hash time lock secrets and saves the block number
     * @param secrets The array of secrets to be registered
     */
    registerSecretBatch: {
      (secrets: string[], txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        secrets: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        secrets: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        secrets: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Get the stored block number at which the secret was revealed
     * @param secrethash The hash of the registered secret `keccak256(secret)`
     */
    getSecretRevealBlockHeight(
      secrethash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
