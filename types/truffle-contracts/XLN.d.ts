/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface XLNContract extends Truffle.Contract<XLNInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<XLNInstance>;
}

export interface LogAddress {
  name: "LogAddress";
  args: {
    0: string;
    1: string;
  };
}

export interface LogBool {
  name: "LogBool";
  args: {
    0: string;
    1: boolean;
  };
}

export interface LogBytes {
  name: "LogBytes";
  args: {
    0: string;
    1: string;
  };
}

export interface LogBytes32 {
  name: "LogBytes32";
  args: {
    0: string;
    1: string;
  };
}

export interface LogInt {
  name: "LogInt";
  args: {
    0: string;
    1: BN;
  };
}

export interface LogString {
  name: "LogString";
  args: {
    0: string;
    1: string;
  };
}

export interface LogUint {
  name: "LogUint";
  args: {
    0: string;
    1: BN;
  };
}

type AllEvents =
  | LogAddress
  | LogBool
  | LogBytes
  | LogBytes32
  | LogInt
  | LogString
  | LogUint;

export interface XLNInstance extends Truffle.ContractInstance {
  assets(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: string }>;

  channels(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN; 3: boolean; 4: BN; 5: string }>;

  hash_to_block(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  hubs(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: BN; 2: string }>;

  registerAsset: {
    (
      assetToRegister: { name: string; addr: string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      assetToRegister: { name: string; addr: string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      assetToRegister: { name: string; addr: string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      assetToRegister: { name: string; addr: string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  registerHub: {
    (
      hub_id: number | BN | string,
      new_uri: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      hub_id: number | BN | string,
      new_uri: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      hub_id: number | BN | string,
      new_uri: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      hub_id: number | BN | string,
      new_uri: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  revealSecret: {
    (secret: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(secret: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      secret: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      secret: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  cleanSecret: {
    (hash: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(hash: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      hash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      hash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  tokenToReserve: {
    (
      params: {
        receiver: string;
        asset_id: number | BN | string;
        amount: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      params: {
        receiver: string;
        asset_id: number | BN | string;
        amount: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      params: {
        receiver: string;
        asset_id: number | BN | string;
        amount: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      params: {
        receiver: string;
        asset_id: number | BN | string;
        amount: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  reserveToToken: {
    (
      params: {
        receiver: string;
        asset_id: number | BN | string;
        amount: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      params: {
        receiver: string;
        asset_id: number | BN | string;
        amount: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      params: {
        receiver: string;
        asset_id: number | BN | string;
        amount: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      params: {
        receiver: string;
        asset_id: number | BN | string;
        amount: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  reserveToReserve: {
    (
      params: {
        receiver: string;
        asset_id: number | BN | string;
        amount: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      params: {
        receiver: string;
        asset_id: number | BN | string;
        amount: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      params: {
        receiver: string;
        asset_id: number | BN | string;
        amount: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      params: {
        receiver: string;
        asset_id: number | BN | string;
        amount: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  reserveToChannel: {
    (
      params: {
        receiver: string;
        partner: string;
        pairs: {
          asset_id: number | BN | string;
          amount: number | BN | string;
        }[];
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      params: {
        receiver: string;
        partner: string;
        pairs: {
          asset_id: number | BN | string;
          amount: number | BN | string;
        }[];
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      params: {
        receiver: string;
        partner: string;
        pairs: {
          asset_id: number | BN | string;
          amount: number | BN | string;
        }[];
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      params: {
        receiver: string;
        partner: string;
        pairs: {
          asset_id: number | BN | string;
          amount: number | BN | string;
        }[];
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  channelToReserve: {
    (
      params: {
        partner: string;
        pairs: {
          asset_id: number | BN | string;
          amount: number | BN | string;
        }[];
        sig: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      params: {
        partner: string;
        pairs: {
          asset_id: number | BN | string;
          amount: number | BN | string;
        }[];
        sig: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      params: {
        partner: string;
        pairs: {
          asset_id: number | BN | string;
          amount: number | BN | string;
        }[];
        sig: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      params: {
        partner: string;
        pairs: {
          asset_id: number | BN | string;
          amount: number | BN | string;
        }[];
        sig: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  cooperativeProof: {
    (
      params: {
        partner: string;
        entries: {
          asset_id: number | BN | string;
          offdelta: number | BN | string;
        }[];
        sig: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      params: {
        partner: string;
        entries: {
          asset_id: number | BN | string;
          offdelta: number | BN | string;
        }[];
        sig: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      params: {
        partner: string;
        entries: {
          asset_id: number | BN | string;
          offdelta: number | BN | string;
        }[];
        sig: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      params: {
        partner: string;
        entries: {
          asset_id: number | BN | string;
          offdelta: number | BN | string;
        }[];
        sig: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  disputeProof: {
    (
      params: {
        partner: string;
        dispute_nonce: number | BN | string;
        entries_hash: string;
        entries: {
          asset_id: number | BN | string;
          offdelta: number | BN | string;
        }[];
        sig: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      params: {
        partner: string;
        dispute_nonce: number | BN | string;
        entries_hash: string;
        entries: {
          asset_id: number | BN | string;
          offdelta: number | BN | string;
        }[];
        sig: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      params: {
        partner: string;
        dispute_nonce: number | BN | string;
        entries_hash: string;
        entries: {
          asset_id: number | BN | string;
          offdelta: number | BN | string;
        }[];
        sig: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      params: {
        partner: string;
        dispute_nonce: number | BN | string;
        entries_hash: string;
        entries: {
          asset_id: number | BN | string;
          offdelta: number | BN | string;
        }[];
        sig: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  revealEntries: {
    (
      params: {
        partner: string;
        entries: {
          asset_id: number | BN | string;
          offdelta: number | BN | string;
        }[];
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      params: {
        partner: string;
        entries: {
          asset_id: number | BN | string;
          offdelta: number | BN | string;
        }[];
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      params: {
        partner: string;
        entries: {
          asset_id: number | BN | string;
          offdelta: number | BN | string;
        }[];
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      params: {
        partner: string;
        entries: {
          asset_id: number | BN | string;
          offdelta: number | BN | string;
        }[];
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getDebts(
    addr: string,
    asset_id: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: { amount: BN; pay_to: string }[]; 1: BN }>;

  enforceDebts: {
    (
      addr: string,
      asset_id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      addr: string,
      asset_id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      addr: string,
      asset_id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      addr: string,
      asset_id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  processBatch: {
    (
      b: {
        cooperativeProof: {
          partner: string;
          entries: {
            asset_id: number | BN | string;
            offdelta: number | BN | string;
          }[];
          sig: string;
        }[];
        disputeProof: {
          partner: string;
          dispute_nonce: number | BN | string;
          entries_hash: string;
          entries: {
            asset_id: number | BN | string;
            offdelta: number | BN | string;
          }[];
          sig: string;
        }[];
        revealEntries: {
          partner: string;
          entries: {
            asset_id: number | BN | string;
            offdelta: number | BN | string;
          }[];
        }[];
        reserveToChannel: {
          receiver: string;
          partner: string;
          pairs: {
            asset_id: number | BN | string;
            amount: number | BN | string;
          }[];
        }[];
        channelToReserve: {
          partner: string;
          pairs: {
            asset_id: number | BN | string;
            amount: number | BN | string;
          }[];
          sig: string;
        }[];
        reserveToToken: {
          receiver: string;
          asset_id: number | BN | string;
          amount: number | BN | string;
        }[];
        tokenToReserve: {
          receiver: string;
          asset_id: number | BN | string;
          amount: number | BN | string;
        }[];
        reserveToReserve: {
          receiver: string;
          asset_id: number | BN | string;
          amount: number | BN | string;
        }[];
        revealSecret: string[];
        hub_id: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      b: {
        cooperativeProof: {
          partner: string;
          entries: {
            asset_id: number | BN | string;
            offdelta: number | BN | string;
          }[];
          sig: string;
        }[];
        disputeProof: {
          partner: string;
          dispute_nonce: number | BN | string;
          entries_hash: string;
          entries: {
            asset_id: number | BN | string;
            offdelta: number | BN | string;
          }[];
          sig: string;
        }[];
        revealEntries: {
          partner: string;
          entries: {
            asset_id: number | BN | string;
            offdelta: number | BN | string;
          }[];
        }[];
        reserveToChannel: {
          receiver: string;
          partner: string;
          pairs: {
            asset_id: number | BN | string;
            amount: number | BN | string;
          }[];
        }[];
        channelToReserve: {
          partner: string;
          pairs: {
            asset_id: number | BN | string;
            amount: number | BN | string;
          }[];
          sig: string;
        }[];
        reserveToToken: {
          receiver: string;
          asset_id: number | BN | string;
          amount: number | BN | string;
        }[];
        tokenToReserve: {
          receiver: string;
          asset_id: number | BN | string;
          amount: number | BN | string;
        }[];
        reserveToReserve: {
          receiver: string;
          asset_id: number | BN | string;
          amount: number | BN | string;
        }[];
        revealSecret: string[];
        hub_id: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      b: {
        cooperativeProof: {
          partner: string;
          entries: {
            asset_id: number | BN | string;
            offdelta: number | BN | string;
          }[];
          sig: string;
        }[];
        disputeProof: {
          partner: string;
          dispute_nonce: number | BN | string;
          entries_hash: string;
          entries: {
            asset_id: number | BN | string;
            offdelta: number | BN | string;
          }[];
          sig: string;
        }[];
        revealEntries: {
          partner: string;
          entries: {
            asset_id: number | BN | string;
            offdelta: number | BN | string;
          }[];
        }[];
        reserveToChannel: {
          receiver: string;
          partner: string;
          pairs: {
            asset_id: number | BN | string;
            amount: number | BN | string;
          }[];
        }[];
        channelToReserve: {
          partner: string;
          pairs: {
            asset_id: number | BN | string;
            amount: number | BN | string;
          }[];
          sig: string;
        }[];
        reserveToToken: {
          receiver: string;
          asset_id: number | BN | string;
          amount: number | BN | string;
        }[];
        tokenToReserve: {
          receiver: string;
          asset_id: number | BN | string;
          amount: number | BN | string;
        }[];
        reserveToReserve: {
          receiver: string;
          asset_id: number | BN | string;
          amount: number | BN | string;
        }[];
        revealSecret: string[];
        hub_id: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      b: {
        cooperativeProof: {
          partner: string;
          entries: {
            asset_id: number | BN | string;
            offdelta: number | BN | string;
          }[];
          sig: string;
        }[];
        disputeProof: {
          partner: string;
          dispute_nonce: number | BN | string;
          entries_hash: string;
          entries: {
            asset_id: number | BN | string;
            offdelta: number | BN | string;
          }[];
          sig: string;
        }[];
        revealEntries: {
          partner: string;
          entries: {
            asset_id: number | BN | string;
            offdelta: number | BN | string;
          }[];
        }[];
        reserveToChannel: {
          receiver: string;
          partner: string;
          pairs: {
            asset_id: number | BN | string;
            amount: number | BN | string;
          }[];
        }[];
        channelToReserve: {
          partner: string;
          pairs: {
            asset_id: number | BN | string;
            amount: number | BN | string;
          }[];
          sig: string;
        }[];
        reserveToToken: {
          receiver: string;
          asset_id: number | BN | string;
          amount: number | BN | string;
        }[];
        tokenToReserve: {
          receiver: string;
          asset_id: number | BN | string;
          amount: number | BN | string;
        }[];
        reserveToReserve: {
          receiver: string;
          asset_id: number | BN | string;
          amount: number | BN | string;
        }[];
        revealSecret: string[];
        hub_id: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  channelKey(
    a1: string,
    a2: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getUser(
    addr: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    ETH_balance: BN;
    assets: {
      reserve: BN;
      debtIndex: BN;
      debts: { amount: BN; pay_to: string }[];
    }[];
  }>;

  getChannels(
    addr: string,
    partners: string[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    {
      partner: string;
      channel: {
        channel_counter: BN;
        cooperative_nonce: BN;
        dispute_nonce: BN;
        dispute_started_by_left: boolean;
        dispute_until_block: BN;
        entries_hash: string;
      };
      collaterals: { collateral: BN; ondelta: BN }[];
    }[]
  >;

  topUp: {
    (
      addr: string,
      asset_id: number | BN | string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      addr: string,
      asset_id: number | BN | string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      addr: string,
      asset_id: number | BN | string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      addr: string,
      asset_id: number | BN | string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createDebt: {
    (
      addr: string,
      pay_to: string,
      asset_id: number | BN | string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      addr: string,
      pay_to: string,
      asset_id: number | BN | string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      addr: string,
      pay_to: string,
      asset_id: number | BN | string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      addr: string,
      pay_to: string,
      asset_id: number | BN | string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  logChannel: {
    (a1: string, a2: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      a1: string,
      a2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      a1: string,
      a2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      a1: string,
      a2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    assets(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: string }>;

    channels(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN; 3: boolean; 4: BN; 5: string }>;

    hash_to_block(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    hubs(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: BN; 2: string }>;

    registerAsset: {
      (
        assetToRegister: { name: string; addr: string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        assetToRegister: { name: string; addr: string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        assetToRegister: { name: string; addr: string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        assetToRegister: { name: string; addr: string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    registerHub: {
      (
        hub_id: number | BN | string,
        new_uri: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        hub_id: number | BN | string,
        new_uri: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        hub_id: number | BN | string,
        new_uri: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        hub_id: number | BN | string,
        new_uri: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    revealSecret: {
      (secret: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        secret: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        secret: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        secret: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    cleanSecret: {
      (hash: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(hash: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        hash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        hash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    tokenToReserve: {
      (
        params: {
          receiver: string;
          asset_id: number | BN | string;
          amount: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        params: {
          receiver: string;
          asset_id: number | BN | string;
          amount: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        params: {
          receiver: string;
          asset_id: number | BN | string;
          amount: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        params: {
          receiver: string;
          asset_id: number | BN | string;
          amount: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    reserveToToken: {
      (
        params: {
          receiver: string;
          asset_id: number | BN | string;
          amount: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        params: {
          receiver: string;
          asset_id: number | BN | string;
          amount: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        params: {
          receiver: string;
          asset_id: number | BN | string;
          amount: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        params: {
          receiver: string;
          asset_id: number | BN | string;
          amount: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    reserveToReserve: {
      (
        params: {
          receiver: string;
          asset_id: number | BN | string;
          amount: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        params: {
          receiver: string;
          asset_id: number | BN | string;
          amount: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        params: {
          receiver: string;
          asset_id: number | BN | string;
          amount: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        params: {
          receiver: string;
          asset_id: number | BN | string;
          amount: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    reserveToChannel: {
      (
        params: {
          receiver: string;
          partner: string;
          pairs: {
            asset_id: number | BN | string;
            amount: number | BN | string;
          }[];
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        params: {
          receiver: string;
          partner: string;
          pairs: {
            asset_id: number | BN | string;
            amount: number | BN | string;
          }[];
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        params: {
          receiver: string;
          partner: string;
          pairs: {
            asset_id: number | BN | string;
            amount: number | BN | string;
          }[];
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        params: {
          receiver: string;
          partner: string;
          pairs: {
            asset_id: number | BN | string;
            amount: number | BN | string;
          }[];
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    channelToReserve: {
      (
        params: {
          partner: string;
          pairs: {
            asset_id: number | BN | string;
            amount: number | BN | string;
          }[];
          sig: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        params: {
          partner: string;
          pairs: {
            asset_id: number | BN | string;
            amount: number | BN | string;
          }[];
          sig: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        params: {
          partner: string;
          pairs: {
            asset_id: number | BN | string;
            amount: number | BN | string;
          }[];
          sig: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        params: {
          partner: string;
          pairs: {
            asset_id: number | BN | string;
            amount: number | BN | string;
          }[];
          sig: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    cooperativeProof: {
      (
        params: {
          partner: string;
          entries: {
            asset_id: number | BN | string;
            offdelta: number | BN | string;
          }[];
          sig: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        params: {
          partner: string;
          entries: {
            asset_id: number | BN | string;
            offdelta: number | BN | string;
          }[];
          sig: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        params: {
          partner: string;
          entries: {
            asset_id: number | BN | string;
            offdelta: number | BN | string;
          }[];
          sig: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        params: {
          partner: string;
          entries: {
            asset_id: number | BN | string;
            offdelta: number | BN | string;
          }[];
          sig: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    disputeProof: {
      (
        params: {
          partner: string;
          dispute_nonce: number | BN | string;
          entries_hash: string;
          entries: {
            asset_id: number | BN | string;
            offdelta: number | BN | string;
          }[];
          sig: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        params: {
          partner: string;
          dispute_nonce: number | BN | string;
          entries_hash: string;
          entries: {
            asset_id: number | BN | string;
            offdelta: number | BN | string;
          }[];
          sig: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        params: {
          partner: string;
          dispute_nonce: number | BN | string;
          entries_hash: string;
          entries: {
            asset_id: number | BN | string;
            offdelta: number | BN | string;
          }[];
          sig: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        params: {
          partner: string;
          dispute_nonce: number | BN | string;
          entries_hash: string;
          entries: {
            asset_id: number | BN | string;
            offdelta: number | BN | string;
          }[];
          sig: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    revealEntries: {
      (
        params: {
          partner: string;
          entries: {
            asset_id: number | BN | string;
            offdelta: number | BN | string;
          }[];
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        params: {
          partner: string;
          entries: {
            asset_id: number | BN | string;
            offdelta: number | BN | string;
          }[];
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        params: {
          partner: string;
          entries: {
            asset_id: number | BN | string;
            offdelta: number | BN | string;
          }[];
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        params: {
          partner: string;
          entries: {
            asset_id: number | BN | string;
            offdelta: number | BN | string;
          }[];
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getDebts(
      addr: string,
      asset_id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: { amount: BN; pay_to: string }[]; 1: BN }>;

    enforceDebts: {
      (
        addr: string,
        asset_id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        addr: string,
        asset_id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        addr: string,
        asset_id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        addr: string,
        asset_id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    processBatch: {
      (
        b: {
          cooperativeProof: {
            partner: string;
            entries: {
              asset_id: number | BN | string;
              offdelta: number | BN | string;
            }[];
            sig: string;
          }[];
          disputeProof: {
            partner: string;
            dispute_nonce: number | BN | string;
            entries_hash: string;
            entries: {
              asset_id: number | BN | string;
              offdelta: number | BN | string;
            }[];
            sig: string;
          }[];
          revealEntries: {
            partner: string;
            entries: {
              asset_id: number | BN | string;
              offdelta: number | BN | string;
            }[];
          }[];
          reserveToChannel: {
            receiver: string;
            partner: string;
            pairs: {
              asset_id: number | BN | string;
              amount: number | BN | string;
            }[];
          }[];
          channelToReserve: {
            partner: string;
            pairs: {
              asset_id: number | BN | string;
              amount: number | BN | string;
            }[];
            sig: string;
          }[];
          reserveToToken: {
            receiver: string;
            asset_id: number | BN | string;
            amount: number | BN | string;
          }[];
          tokenToReserve: {
            receiver: string;
            asset_id: number | BN | string;
            amount: number | BN | string;
          }[];
          reserveToReserve: {
            receiver: string;
            asset_id: number | BN | string;
            amount: number | BN | string;
          }[];
          revealSecret: string[];
          hub_id: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        b: {
          cooperativeProof: {
            partner: string;
            entries: {
              asset_id: number | BN | string;
              offdelta: number | BN | string;
            }[];
            sig: string;
          }[];
          disputeProof: {
            partner: string;
            dispute_nonce: number | BN | string;
            entries_hash: string;
            entries: {
              asset_id: number | BN | string;
              offdelta: number | BN | string;
            }[];
            sig: string;
          }[];
          revealEntries: {
            partner: string;
            entries: {
              asset_id: number | BN | string;
              offdelta: number | BN | string;
            }[];
          }[];
          reserveToChannel: {
            receiver: string;
            partner: string;
            pairs: {
              asset_id: number | BN | string;
              amount: number | BN | string;
            }[];
          }[];
          channelToReserve: {
            partner: string;
            pairs: {
              asset_id: number | BN | string;
              amount: number | BN | string;
            }[];
            sig: string;
          }[];
          reserveToToken: {
            receiver: string;
            asset_id: number | BN | string;
            amount: number | BN | string;
          }[];
          tokenToReserve: {
            receiver: string;
            asset_id: number | BN | string;
            amount: number | BN | string;
          }[];
          reserveToReserve: {
            receiver: string;
            asset_id: number | BN | string;
            amount: number | BN | string;
          }[];
          revealSecret: string[];
          hub_id: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        b: {
          cooperativeProof: {
            partner: string;
            entries: {
              asset_id: number | BN | string;
              offdelta: number | BN | string;
            }[];
            sig: string;
          }[];
          disputeProof: {
            partner: string;
            dispute_nonce: number | BN | string;
            entries_hash: string;
            entries: {
              asset_id: number | BN | string;
              offdelta: number | BN | string;
            }[];
            sig: string;
          }[];
          revealEntries: {
            partner: string;
            entries: {
              asset_id: number | BN | string;
              offdelta: number | BN | string;
            }[];
          }[];
          reserveToChannel: {
            receiver: string;
            partner: string;
            pairs: {
              asset_id: number | BN | string;
              amount: number | BN | string;
            }[];
          }[];
          channelToReserve: {
            partner: string;
            pairs: {
              asset_id: number | BN | string;
              amount: number | BN | string;
            }[];
            sig: string;
          }[];
          reserveToToken: {
            receiver: string;
            asset_id: number | BN | string;
            amount: number | BN | string;
          }[];
          tokenToReserve: {
            receiver: string;
            asset_id: number | BN | string;
            amount: number | BN | string;
          }[];
          reserveToReserve: {
            receiver: string;
            asset_id: number | BN | string;
            amount: number | BN | string;
          }[];
          revealSecret: string[];
          hub_id: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        b: {
          cooperativeProof: {
            partner: string;
            entries: {
              asset_id: number | BN | string;
              offdelta: number | BN | string;
            }[];
            sig: string;
          }[];
          disputeProof: {
            partner: string;
            dispute_nonce: number | BN | string;
            entries_hash: string;
            entries: {
              asset_id: number | BN | string;
              offdelta: number | BN | string;
            }[];
            sig: string;
          }[];
          revealEntries: {
            partner: string;
            entries: {
              asset_id: number | BN | string;
              offdelta: number | BN | string;
            }[];
          }[];
          reserveToChannel: {
            receiver: string;
            partner: string;
            pairs: {
              asset_id: number | BN | string;
              amount: number | BN | string;
            }[];
          }[];
          channelToReserve: {
            partner: string;
            pairs: {
              asset_id: number | BN | string;
              amount: number | BN | string;
            }[];
            sig: string;
          }[];
          reserveToToken: {
            receiver: string;
            asset_id: number | BN | string;
            amount: number | BN | string;
          }[];
          tokenToReserve: {
            receiver: string;
            asset_id: number | BN | string;
            amount: number | BN | string;
          }[];
          reserveToReserve: {
            receiver: string;
            asset_id: number | BN | string;
            amount: number | BN | string;
          }[];
          revealSecret: string[];
          hub_id: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    channelKey(
      a1: string,
      a2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getUser(
      addr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      ETH_balance: BN;
      assets: {
        reserve: BN;
        debtIndex: BN;
        debts: { amount: BN; pay_to: string }[];
      }[];
    }>;

    getChannels(
      addr: string,
      partners: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      {
        partner: string;
        channel: {
          channel_counter: BN;
          cooperative_nonce: BN;
          dispute_nonce: BN;
          dispute_started_by_left: boolean;
          dispute_until_block: BN;
          entries_hash: string;
        };
        collaterals: { collateral: BN; ondelta: BN }[];
      }[]
    >;

    topUp: {
      (
        addr: string,
        asset_id: number | BN | string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        addr: string,
        asset_id: number | BN | string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        addr: string,
        asset_id: number | BN | string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        addr: string,
        asset_id: number | BN | string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    createDebt: {
      (
        addr: string,
        pay_to: string,
        asset_id: number | BN | string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        addr: string,
        pay_to: string,
        asset_id: number | BN | string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        addr: string,
        pay_to: string,
        asset_id: number | BN | string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        addr: string,
        pay_to: string,
        asset_id: number | BN | string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    logChannel: {
      (a1: string, a2: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        a1: string,
        a2: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        a1: string,
        a2: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        a1: string,
        a2: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "log(string,bytes)": {
      (s: string, x: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        s: string,
        x: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        s: string,
        x: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        s: string,
        x: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "log(string,address)": {
      (s: string, x: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        s: string,
        x: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        s: string,
        x: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        s: string,
        x: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "log(string,bytes32)": {
      (s: string, x: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        s: string,
        x: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        s: string,
        x: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        s: string,
        x: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "log(string,int256)": {
      (
        s: string,
        x: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        s: string,
        x: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        s: string,
        x: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        s: string,
        x: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "log(string,string)": {
      (s: string, x: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        s: string,
        x: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        s: string,
        x: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        s: string,
        x: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "log(string,uint256)": {
      (
        s: string,
        x: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        s: string,
        x: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        s: string,
        x: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        s: string,
        x: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "log(string,bool)": {
      (s: string, x: boolean, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        s: string,
        x: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        s: string,
        x: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        s: string,
        x: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
